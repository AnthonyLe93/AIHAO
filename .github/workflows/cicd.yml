name: CICD pipeline for AIHAO

on:
  push:
    branches: [ "main", "dev"]
  pull_request:
    branches: [ "main", "dev" ]
env:
  DB_HOST: ${{secrets.DB_HOST}}
  DB_PORT: ${{secrets.DB_PORT}}
  DB_NAME: ${{secrets.DB_NAME}}
  DB_USER: ${{secrets.DB_USER}}
  DB_PASSWORD: ${{secrets.DB_PASSWORD}}
jobs:
  build:
    runs-on: macos-latest
    strategy:
      matrix:
        python-version: [ "3.10", "3.11" ]
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python # Set Python version
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ hashFiles('setup.py') }}-${{ hashFiles('requirements.txt') }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install --upgrade wheel
        pip install --upgrade setuptools
        brew install portaudio
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Install Git LFS
      run: |
        brew install git-lfs
        git lfs install
        git lfs pull
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Type checking with mypy
      continue-on-error: true
      run: mypy -p aihao
    - name: Run unit-tests
      run: |
        cd tests/
        pytest -m "not speech_recognition"
    - name: Upload pytest test results
      uses: actions/upload-artifact@v3
      with:
        name: pytest-results-${{ matrix.python-version }}
        path: junit/test-results-${{ matrix.python-version }}.xml
      # Use always() to always run this step to publish test results when there are test failures
      if: ${{ always() }}
  sonarcloud:
    name: SonarCloud
    runs-on: ubuntu-latest
    needs: [ build ]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
