name: CICD pipeline for AIHAO

on:
  push:
    branches: [ "main", "dev"]
  pull_request:
    branches: [ "main", "dev" ]

env:
  DB_HOST: ${{secrets.DB_HOST}}
  DB_PORT: ${{secrets.DB_PORT}}
  DB_NAME: ${{secrets.DB_NAME}}
  DB_USER: ${{secrets.DB_USER}}
  DB_PASSWORD: ${{secrets.DB_PASSWORD}}
  CI: ${{vars.CI}}
jobs:
  build:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: ${{secrets.DB_PASSWORD}}
          POSTGRES_DB: ${{secrets.DB_NAME}}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: ${{ hashFiles('setup.py') }}-${{ hashFiles('requirements.txt') }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install --upgrade wheel
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Type checking with mypy
      continue-on-error: true
      run: mypy -p aihao

    - name: Test database connection
      run: psql postgres://postgres:postgres@localhost:5432/postgres -c 'SELECT 1;'

    - name: Initialised database
      env:
        PGPASSWORD: ${{secrets.DB_PASSWORD}}
      run: |
        psql -U postgres -d aihao_db -h localhost -f ./data/schema_test.sql
        psql -U postgres -d aihao_db -h localhost -f ./data/data_test.sql
    - name: Run unit-tests
      run: |
        cd tests/
        pytest